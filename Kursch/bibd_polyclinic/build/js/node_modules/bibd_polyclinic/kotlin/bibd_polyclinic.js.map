{"version":3,"file":"bibd_polyclinic.js","sources":["../../../../../src/commonMain/kotlin/generated/gen-tag-unions.kt","../../../../../src/commonMain/kotlin/api.kt","../../../../../src/commonMain/kotlin/generated/gen-tags-u.kt","../../../../../src/commonMain/kotlin/generated/gen-tag-groups.kt","../../../../../src/commonMain/kotlin/generated/gen-tags-h.kt","../../../../../src/commonMain/kotlin/generated/gen-tags-t.kt","../../../../../src/commonMain/kotlin/model/Appointment.kt","../../../../../src/commonMain/kotlin/model/Department.kt","../../../../../src/commonMain/kotlin/model/Diagnosis.kt","../../../../../src/commonMain/kotlin/model/Doctor.kt","../../../../../src/commonMain/kotlin/model/Patient.kt","../../../../../src/commonMain/kotlin/model/PatientCard.kt","../../../../../src/jsMain/kotlin/Client.kt","../../../../../src/jsMain/kotlin/view/Hello.kt","../../../../../src/jsMain/kotlin/view/Table.kt"],"sourcesContent":["package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\ninterface FlowOrMetaDataOrPhrasingContent : Tag {\n}\n\ninterface FlowOrHeadingContent : Tag {\n}\n\ninterface FlowOrMetaDataContent : FlowOrMetaDataOrPhrasingContent, Tag {\n}\n\ninterface FlowOrInteractiveContent : FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface FlowOrPhrasingContent : FlowOrInteractiveOrPhrasingContent, FlowOrMetaDataOrPhrasingContent, Tag {\n}\n\ninterface SectioningOrFlowContent : Tag {\n}\n\ninterface FlowOrInteractiveOrPhrasingContent : Tag {\n}\n\n\n\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.command(type : CommandType? = null, classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.commandCommand(classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.command.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.checkBoxCommand(classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.checkBox.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.radioCommand(classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.radio.realValue,\"class\", classes), consumer).visit(block)\n\n/**\n * A media-independent link\n */\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.link(href : String? = null, rel : String? = null, type : String? = null, crossinline block : LINK.() -> Unit = {}) : Unit = LINK(attributesMapOf(\"href\", href,\"rel\", rel,\"type\", type), consumer).visit(block)\n\n/**\n * Generic metainformation\n */\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.meta(name : String? = null, content : String? = null, charset : String? = null, crossinline block : META.() -> Unit = {}) : Unit = META(attributesMapOf(\"name\", name,\"content\", content,\"charset\", charset), consumer).visit(block)\n\n/**\n * Generic metainformation\n */\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.noScript(classes : String? = null, crossinline block : NOSCRIPT.() -> Unit = {}) : Unit = NOSCRIPT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Script statements\n */\n@HtmlTagMarker\ninline fun FlowOrMetaDataOrPhrasingContent.script(type : String? = null, src : String? = null, crossinline block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), consumer).visit(block)\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\n/**\n * Script statements\n */\n@HtmlTagMarker\nfun FlowOrMetaDataOrPhrasingContent.script(type : String? = null, src : String? = null, content : String = \"\") : Unit = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), consumer).visit({+content})\n\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun FlowOrHeadingContent.h1(classes : String? = null, crossinline block : H1.() -> Unit = {}) : Unit = H1(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun FlowOrHeadingContent.h2(classes : String? = null, crossinline block : H2.() -> Unit = {}) : Unit = H2(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun FlowOrHeadingContent.h3(classes : String? = null, crossinline block : H3.() -> Unit = {}) : Unit = H3(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun FlowOrHeadingContent.h4(classes : String? = null, crossinline block : H4.() -> Unit = {}) : Unit = H4(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun FlowOrHeadingContent.h5(classes : String? = null, crossinline block : H5.() -> Unit = {}) : Unit = H5(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun FlowOrHeadingContent.h6(classes : String? = null, crossinline block : H6.() -> Unit = {}) : Unit = H6(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n@HtmlTagMarker\ninline fun FlowOrHeadingContent.hGroup(classes : String? = null, crossinline block : HGROUP.() -> Unit = {}) : Unit = HGROUP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n/**\n * Style info\n */\n@HtmlTagMarker\ninline fun FlowOrMetaDataContent.style(type : String? = null, crossinline block : STYLE.() -> Unit = {}) : Unit = STYLE(attributesMapOf(\"type\", type), consumer).visit(block)\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\n/**\n * Style info\n */\n@HtmlTagMarker\nfun FlowOrMetaDataContent.style(type : String? = null, content : String = \"\") : Unit = STYLE(attributesMapOf(\"type\", type), consumer).visit({+content})\n\n\n/**\n * Disclosure control for hiding details\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveContent.details(classes : String? = null, crossinline block : DETAILS.() -> Unit = {}) : Unit = DETAILS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n/**\n * Abbreviated form (e.g., WWW, HTTP,etc.)\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.abbr(classes : String? = null, crossinline block : ABBR.() -> Unit = {}) : Unit = ABBR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Client-side image map area\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", shape?.enumEncode(),\"alt\", alt,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.rectArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.rect.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.circleArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.circle.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.polyArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.poly.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.defaultArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.default.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\n\n/**\n * Bold text style\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.b(classes : String? = null, crossinline block : B.() -> Unit = {}) : Unit = B(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Text directionality isolation\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.bdi(classes : String? = null, crossinline block : BDI.() -> Unit = {}) : Unit = BDI(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * I18N BiDi over-ride\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.bdo(classes : String? = null, crossinline block : BDO.() -> Unit = {}) : Unit = BDO(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Forced line break\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.br(classes : String? = null, crossinline block : BR.() -> Unit = {}) : Unit = BR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Scriptable bitmap canvas\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.canvas(classes : String? = null, crossinline block : CANVAS.() -> Unit = {}) : Unit = CANVAS(attributesMapOf(\"class\", classes), consumer).visit(block)\n/**\n * Scriptable bitmap canvas\n */\n@HtmlTagMarker\nfun FlowOrPhrasingContent.canvas(classes : String? = null, content : String = \"\") : Unit = CANVAS(attributesMapOf(\"class\", classes), consumer).visit({+content})\n\n/**\n * Citation\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.cite(classes : String? = null, crossinline block : CITE.() -> Unit = {}) : Unit = CITE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Computer code fragment\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.code(classes : String? = null, crossinline block : CODE.() -> Unit = {}) : Unit = CODE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Container for options for \n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.dataList(classes : String? = null, crossinline block : DATALIST.() -> Unit = {}) : Unit = DATALIST(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Deleted text\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.del(classes : String? = null, crossinline block : DEL.() -> Unit = {}) : Unit = DEL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Instance definition\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.dfn(classes : String? = null, crossinline block : DFN.() -> Unit = {}) : Unit = DFN(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Emphasis\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.em(classes : String? = null, crossinline block : EM.() -> Unit = {}) : Unit = EM(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Italic text style\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.i(classes : String? = null, crossinline block : I.() -> Unit = {}) : Unit = I(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Inserted text\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.ins(classes : String? = null, crossinline block : INS.() -> Unit = {}) : Unit = INS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Text to be entered by the user\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.kbd(classes : String? = null, crossinline block : KBD.() -> Unit = {}) : Unit = KBD(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Client-side image map\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.map(name : String? = null, classes : String? = null, crossinline block : MAP.() -> Unit = {}) : Unit = MAP(attributesMapOf(\"name\", name,\"class\", classes), consumer).visit(block)\n\n/**\n * Highlight\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.mark(classes : String? = null, crossinline block : MARK.() -> Unit = {}) : Unit = MARK(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.math(classes : String? = null, crossinline block : MATH.() -> Unit = {}) : Unit = MATH(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Gauge\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.meter(classes : String? = null, crossinline block : METER.() -> Unit = {}) : Unit = METER(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Calculated output value\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.output(classes : String? = null, crossinline block : OUTPUT.() -> Unit = {}) : Unit = OUTPUT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Progress bar\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.progress(classes : String? = null, crossinline block : PROGRESS.() -> Unit = {}) : Unit = PROGRESS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Short inline quotation\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.q(classes : String? = null, crossinline block : Q.() -> Unit = {}) : Unit = Q(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Ruby annotation(s)\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.ruby(classes : String? = null, crossinline block : RUBY.() -> Unit = {}) : Unit = RUBY(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Strike-through text style\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.samp(classes : String? = null, crossinline block : SAMP.() -> Unit = {}) : Unit = SAMP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Small text style\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.small(classes : String? = null, crossinline block : SMALL.() -> Unit = {}) : Unit = SMALL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Generic language/style container\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.span(classes : String? = null, crossinline block : SPAN.() -> Unit = {}) : Unit = SPAN(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Strong emphasis\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.strong(classes : String? = null, crossinline block : STRONG.() -> Unit = {}) : Unit = STRONG(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Subscript\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.sub(classes : String? = null, crossinline block : SUB.() -> Unit = {}) : Unit = SUB(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Superscript\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.sup(classes : String? = null, crossinline block : SUP.() -> Unit = {}) : Unit = SUP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.svg(classes : String? = null, crossinline block : SVG.() -> Unit = {}) : Unit = SVG(attributesMapOf(\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\nfun FlowOrPhrasingContent.svg(classes : String? = null, content : String = \"\") : Unit = SVG(attributesMapOf(\"class\", classes), consumer).visit({+content})\n\n/**\n * Machine-readable equivalent of date- or time-related data\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.time(classes : String? = null, crossinline block : TIME.() -> Unit = {}) : Unit = TIME(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Unordered list\n */\n@HtmlTagMarker\ninline fun FlowOrPhrasingContent.htmlVar(classes : String? = null, crossinline block : VAR.() -> Unit = {}) : Unit = VAR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n/**\n * Self-contained syndicatable or reusable composition\n */\n@HtmlTagMarker\ninline fun SectioningOrFlowContent.article(classes : String? = null, crossinline block : ARTICLE.() -> Unit = {}) : Unit = ARTICLE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Sidebar for tangentially related content\n */\n@HtmlTagMarker\ninline fun SectioningOrFlowContent.aside(classes : String? = null, crossinline block : ASIDE.() -> Unit = {}) : Unit = ASIDE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Container for the dominant contents of another element\n */\n@HtmlTagMarker\ninline fun SectioningOrFlowContent.main(classes : String? = null, crossinline block : MAIN.() -> Unit = {}) : Unit = MAIN(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Section with navigational links\n */\n@HtmlTagMarker\ninline fun SectioningOrFlowContent.nav(classes : String? = null, crossinline block : NAV.() -> Unit = {}) : Unit = NAV(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Generic document or application section\n */\n@HtmlTagMarker\ninline fun SectioningOrFlowContent.section(classes : String? = null, crossinline block : SECTION.() -> Unit = {}) : Unit = SECTION(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n/**\n * Anchor\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.a(href : String? = null, target : String? = null, classes : String? = null, crossinline block : A.() -> Unit = {}) : Unit = A(attributesMapOf(\"href\", href,\"target\", target,\"class\", classes), consumer).visit(block)\n\n/**\n * Audio player\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.audio(classes : String? = null, crossinline block : AUDIO.() -> Unit = {}) : Unit = AUDIO(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Push button\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.getButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.get.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.postButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.post.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n@Suppress(\"DEPRECATION\")\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.putButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.put.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n@Suppress(\"DEPRECATION\")\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.deleteButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.delete.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n@Suppress(\"DEPRECATION\")\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.patchButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.patch.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n\n/**\n * Plugin\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.embed(classes : String? = null, crossinline block : EMBED.() -> Unit = {}) : Unit = EMBED(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Inline subwindow\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), consumer).visit(block)\n/**\n * Inline subwindow\n */\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), consumer).visit({+content})\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.allowSameOriginIframe(classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowSameOrigin.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.allowFormSIframe(classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowFormS.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.allowScriptsIframe(classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowScripts.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.allowSameOriginIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowSameOrigin.realValue,\"class\", classes), consumer).visit({+content})\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.allowFormSIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowFormS.realValue,\"class\", classes), consumer).visit({+content})\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.allowScriptsIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowScripts.realValue,\"class\", classes), consumer).visit({+content})\n\n/**\n * Embedded image\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.img(alt : String? = null, src : String? = null, classes : String? = null, crossinline block : IMG.() -> Unit = {}) : Unit = IMG(attributesMapOf(\"alt\", alt,\"src\", src,\"class\", classes), consumer).visit(block)\n\n/**\n * Pictures container\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.picture(crossinline block : PICTURE.() -> Unit = {}) : Unit = PICTURE(emptyMap, consumer).visit(block)\n\n/**\n * Form control\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", type?.enumEncode(),\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.button.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.checkBox.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.color.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.date.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.dateTime.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.dateTimeLocal.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.email.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.file.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.hidden.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.image.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.month.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.number.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.password.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.radio.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.range.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.reset.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.search.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.submit.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.text.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.tel.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.time.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.url.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.week.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n\n/**\n * Cryptographic key-pair generator form control\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, crossinline block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(),\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.rsaKeyGen(classes : String? = null, crossinline block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf(\"keytype\", KeyGenKeyType.rsa.realValue,\"class\", classes), consumer).visit(block)\n\n/**\n * Form field label text\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.label(classes : String? = null, crossinline block : LABEL.() -> Unit = {}) : Unit = LABEL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Generic embedded object\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.htmlObject(classes : String? = null, crossinline block : OBJECT.() -> Unit = {}) : Unit = OBJECT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Option selector\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.select(classes : String? = null, crossinline block : SELECT.() -> Unit = {}) : Unit = SELECT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Multi-line text field\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), consumer).visit(block)\n/**\n * Multi-line text field\n */\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), consumer).visit({+content})\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.hard.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.soft.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.hard.realValue,\"class\", classes), consumer).visit({+content})\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.soft.realValue,\"class\", classes), consumer).visit({+content})\n\n/**\n * Video player\n */\n@HtmlTagMarker\ninline fun FlowOrInteractiveOrPhrasingContent.video(classes : String? = null, crossinline block : VIDEO.() -> Unit = {}) : Unit = VIDEO(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n","package kotlinx.html\n\nimport org.w3c.dom.events.*\n\ninterface TagConsumer<out R> {\n    fun onTagStart(tag: Tag)\n    fun onTagAttributeChange(tag: Tag, attribute: String, value: String?)\n    fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit)\n    fun onTagEnd(tag: Tag)\n    fun onTagContent(content: CharSequence)\n    fun onTagContentEntity(entity: Entities)\n    fun onTagContentUnsafe(block: Unsafe.() -> Unit)\n    fun onTagComment(content: CharSequence)\n    fun onTagError(tag: Tag, exception: Throwable): Unit = throw exception\n    fun finalize(): R\n}\n\n@HtmlTagMarker\ninterface Tag {\n    val tagName: String\n    val consumer: TagConsumer<*>\n    val namespace: String?\n\n    val attributes: MutableMap<String, String>\n    val attributesEntries: Collection<Map.Entry<String, String>>\n\n    val inlineTag: Boolean\n    val emptyTag: Boolean\n\n    operator fun Entities.unaryPlus(): Unit {\n        entity(this)\n    }\n\n    operator fun String.unaryPlus(): Unit {\n        text(this)\n    }\n\n    fun text(s: String) {\n        consumer.onTagContent(s)\n    }\n\n    fun text(n: Number) {\n        text(n.toString())\n    }\n\n    fun entity(e: Entities) {\n        consumer.onTagContentEntity(e)\n    }\n\n    fun comment(s: String) {\n        consumer.onTagComment(s)\n    }\n}\n\n@HtmlTagMarker\ninterface Unsafe {\n    operator fun String.unaryPlus()\n    operator fun Entities.unaryPlus() = +text\n\n    fun raw(s: String) {\n        +s\n    }\n\n    fun raw(entity: Entities) {\n        +entity\n    }\n\n    fun raw(n: Number) {\n        +n.toString()\n    }\n}\n\ninterface AttributeEnum {\n    val realValue: String\n}\n\ninline fun <T : Tag> T.visit(crossinline block: T.() -> Unit) = visitTag { block() }\n\ninline fun <T : Tag, R> T.visitAndFinalize(consumer: TagConsumer<R>, crossinline block: T.() -> Unit): R\n        = visitTagAndFinalize(consumer) { block() }\n\nfun attributesMapOf() = emptyMap\nfun attributesMapOf(key: String, value: String?): Map<String, String> = when (value) {\n    null -> emptyMap\n    else -> singletonMapOf(key, value)\n}\n\nfun attributesMapOf(vararg pairs: String?): Map<String, String> {\n    var result: MutableMap<String, String>? = null\n\n    for (i in 0..pairs.size - 1 step 2) {\n        val k = pairs[i]\n        val v = pairs[i + 1]\n        if (k != null && v != null) {\n            if (result == null) {\n                result = linkedMapOf()\n            }\n            result.put(k, v)\n        }\n    }\n\n    return result ?: emptyMap\n}\n\nfun singletonMapOf(key: String, value: String): Map<String, String> = SingletonStringMap(key, value)\n\nfun HTMLTag.unsafe(block: Unsafe.() -> Unit): Unit = consumer.onTagContentUnsafe(block)\n\nval emptyMap: Map<String, String> = emptyMap()\n\nclass DefaultUnsafe : Unsafe {\n    private val sb = StringBuilder()\n\n    override fun String.unaryPlus() {\n        sb.append(this)\n    }\n\n    override fun toString(): String = sb.toString()\n}\n\n@DslMarker\nannotation class HtmlTagMarker\n\ntypealias HtmlContent = FlowOrPhrasingContent\n\nprivate data class SingletonStringMap(override val key: String, override val value: String) : Map<String, String>,\n    Map.Entry<String, String> {\n    override val entries: Set<Map.Entry<String, String>>\n        get() = setOf(this)\n\n    override val keys: Set<String>\n        get() = setOf(key)\n\n    override val size: Int\n        get() = 1\n\n    override val values: Collection<String>\n        get() = listOf(value)\n\n    override fun containsKey(key: String) = key == this.key\n    override fun containsValue(value: String) = value == this.value\n    override fun get(key: String): String? = if (key == this.key) value else null\n    override fun isEmpty() = false\n}\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class UL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"ul\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n/**\n * List item\n */\n@HtmlTagMarker\ninline fun UL.li(classes : String? = null, crossinline block : LI.() -> Unit = {}) : Unit = LI(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\ninterface FlowContent : FlowOrMetaDataOrPhrasingContent, FlowOrHeadingContent, FlowOrMetaDataContent, FlowOrInteractiveContent, FlowOrPhrasingContent, SectioningOrFlowContent, FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface HeadingContent : FlowOrHeadingContent, Tag {\n}\n\ninterface InteractiveContent : FlowOrInteractiveContent, FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface MetaDataContent : FlowOrMetaDataOrPhrasingContent, FlowOrMetaDataContent, Tag {\n}\n\ninterface PhrasingContent : FlowOrMetaDataOrPhrasingContent, FlowOrPhrasingContent, FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface SectioningContent : SectioningOrFlowContent, Tag {\n}\n\n/**\n * Information on author\n */\n@HtmlTagMarker\ninline fun FlowContent.address(classes : String? = null, crossinline block : ADDRESS.() -> Unit = {}) : Unit = ADDRESS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Long quotation\n */\n@HtmlTagMarker\ninline fun FlowContent.blockQuote(classes : String? = null, crossinline block : BLOCKQUOTE.() -> Unit = {}) : Unit = BLOCKQUOTE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Dialog box or window\n */\n@HtmlTagMarker\ninline fun FlowContent.dialog(classes : String? = null, crossinline block : DIALOG.() -> Unit = {}) : Unit = DIALOG(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Generic language/style container\n */\n@HtmlTagMarker\ninline fun FlowContent.div(classes : String? = null, crossinline block : DIV.() -> Unit = {}) : Unit = DIV(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Definition list\n */\n@HtmlTagMarker\ninline fun FlowContent.dl(classes : String? = null, crossinline block : DL.() -> Unit = {}) : Unit = DL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Form control group\n */\n@HtmlTagMarker\ninline fun FlowContent.fieldSet(classes : String? = null, crossinline block : FIELDSET.() -> Unit = {}) : Unit = FIELDSET(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Figure with optional caption\n */\n@HtmlTagMarker\ninline fun FlowContent.figure(classes : String? = null, crossinline block : FIGURE.() -> Unit = {}) : Unit = FIGURE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Caption for \n */\n@HtmlTagMarker\ninline fun FlowContent.figcaption(classes : String? = null, crossinline block : FIGCAPTION.() -> Unit = {}) : Unit = FIGCAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Footer for a page or section\n */\n@HtmlTagMarker\ninline fun FlowContent.footer(classes : String? = null, crossinline block : FOOTER.() -> Unit = {}) : Unit = FOOTER(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Interactive form\n */\n@HtmlTagMarker\ninline fun FlowContent.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", method?.enumEncode(),\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowContent.getForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.get.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun FlowContent.postForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.post.realValue,\"class\", classes), consumer).visit(block)\n@Suppress(\"DEPRECATION\")\n@HtmlTagMarker\ninline fun FlowContent.putForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.put.realValue,\"class\", classes), consumer).visit(block)\n@Suppress(\"DEPRECATION\")\n@HtmlTagMarker\ninline fun FlowContent.deleteForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.delete.realValue,\"class\", classes), consumer).visit(block)\n@Suppress(\"DEPRECATION\")\n@HtmlTagMarker\ninline fun FlowContent.patchForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.patch.realValue,\"class\", classes), consumer).visit(block)\n\n/**\n * Introductory or navigational aids for a page or section\n */\n@HtmlTagMarker\ninline fun FlowContent.header(classes : String? = null, crossinline block : HEADER.() -> Unit = {}) : Unit = HEADER(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Horizontal rule\n */\n@HtmlTagMarker\ninline fun FlowContent.hr(classes : String? = null, crossinline block : HR.() -> Unit = {}) : Unit = HR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Ordered list\n */\n@HtmlTagMarker\ninline fun FlowContent.ol(classes : String? = null, crossinline block : OL.() -> Unit = {}) : Unit = OL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Paragraph\n */\n@HtmlTagMarker\ninline fun FlowContent.p(classes : String? = null, crossinline block : P.() -> Unit = {}) : Unit = P(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Preformatted text\n */\n@HtmlTagMarker\ninline fun FlowContent.pre(classes : String? = null, crossinline block : PRE.() -> Unit = {}) : Unit = PRE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Caption for \n */\n@HtmlTagMarker\ninline fun FlowContent.summary(classes : String? = null, crossinline block : SUMMARY.() -> Unit = {}) : Unit = SUMMARY(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * \n */\n@HtmlTagMarker\ninline fun FlowContent.table(classes : String? = null, crossinline block : TABLE.() -> Unit = {}) : Unit = TABLE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Unordered list\n */\n@HtmlTagMarker\ninline fun FlowContent.ul(classes : String? = null, crossinline block : UL.() -> Unit = {}) : Unit = UL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Document base URI\n */\n@HtmlTagMarker\ninline fun MetaDataContent.base(classes : String? = null, crossinline block : BASE.() -> Unit = {}) : Unit = BASE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Document title\n */\n@HtmlTagMarker\ninline fun MetaDataContent.title(crossinline block : TITLE.() -> Unit = {}) : Unit = TITLE(emptyMap, consumer).visit(block)\n/**\n * Document title\n */\n@HtmlTagMarker\nfun MetaDataContent.title(content : String = \"\") : Unit = TITLE(emptyMap, consumer).visit({+content})\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class H1(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h1\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H2(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h2\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H3(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h3\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H4(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h4\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H5(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h5\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H6(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h6\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class HEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"head\", consumer, initialAttributes, null, false, false), HtmlHeadTag {\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun Entities.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") entity(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun String.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") text(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(s : String) : Unit {\n        super<HTMLTag>.text(s)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(n : Number) : Unit {\n        super<HTMLTag>.text(n)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun entity(e : Entities) : Unit {\n        super<HTMLTag>.entity(e)\n    }\n\n}\n\n@Suppress(\"unused\")\nopen class HEADER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"header\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class HGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"hgroup\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingContent {\n\n}\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun HGROUP.h1(classes : String? = null, crossinline block : H1.() -> Unit = {}) : Unit = H1(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun HGROUP.h2(classes : String? = null, crossinline block : H2.() -> Unit = {}) : Unit = H2(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun HGROUP.h3(classes : String? = null, crossinline block : H3.() -> Unit = {}) : Unit = H3(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun HGROUP.h4(classes : String? = null, crossinline block : H4.() -> Unit = {}) : Unit = H4(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun HGROUP.h5(classes : String? = null, crossinline block : H5.() -> Unit = {}) : Unit = H5(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Heading\n */\n@HtmlTagMarker\ninline fun HGROUP.h6(classes : String? = null, crossinline block : H6.() -> Unit = {}) : Unit = H6(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nval HGROUP.asFlowContent : FlowContent\n    get()  = this\n\nval HGROUP.asHeadingContent : HeadingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class HR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"hr\", consumer, initialAttributes, null, false, true), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class HTML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>, namespace : String? = null) : HTMLTag(\"html\", consumer, initialAttributes, namespace, false, false), CommonAttributeGroupFacade {\n    var manifest : String\n        get()  = attributeStringString.get(this, \"manifest\")\n        set(newValue) {attributeStringString.set(this, \"manifest\", newValue)}\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun Entities.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") entity(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun String.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") text(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(s : String) : Unit {\n        super<HTMLTag>.text(s)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(n : Number) : Unit {\n        super<HTMLTag>.text(n)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun entity(e : Entities) : Unit {\n        super<HTMLTag>.entity(e)\n    }\n\n}\n/**\n * Document body\n */\n@HtmlTagMarker\ninline fun HTML.body(classes : String? = null, crossinline block : BODY.() -> Unit = {}) : Unit = BODY(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Document head\n */\n@HtmlTagMarker\ninline fun HTML.head(crossinline block : HEAD.() -> Unit = {}) : Unit = HEAD(emptyMap, consumer).visit(block)\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\n/**\n * Document head\n */\n@HtmlTagMarker\nfun HTML.head(content : String = \"\") : Unit = HEAD(emptyMap, consumer).visit({+content})\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class TABLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"table\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var summary : String\n        get()  = attributeStringString.get(this, \"summary\")\n        set(newValue) {attributeStringString.set(this, \"summary\", newValue)}\n\n\n}\n/**\n * Table caption\n */\n@HtmlTagMarker\ninline fun TABLE.caption(classes : String? = null, crossinline block : CAPTION.() -> Unit = {}) : Unit = CAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Table column group\n */\n@HtmlTagMarker\ninline fun TABLE.colGroup(classes : String? = null, crossinline block : COLGROUP.() -> Unit = {}) : Unit = COLGROUP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Table header\n */\n@HtmlTagMarker\ninline fun TABLE.thead(classes : String? = null, crossinline block : THEAD.() -> Unit = {}) : Unit = THEAD(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Table footer\n */\n@HtmlTagMarker\ninline fun TABLE.tfoot(classes : String? = null, crossinline block : TFOOT.() -> Unit = {}) : Unit = TFOOT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Table body\n */\n@HtmlTagMarker\ninline fun TABLE.tbody(classes : String? = null, crossinline block : TBODY.() -> Unit = {}) : Unit = TBODY(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n/**\n * Table row\n */\n@HtmlTagMarker\ninline fun TABLE.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TBODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tbody\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\n/**\n * Table row\n */\n@HtmlTagMarker\ninline fun TBODY.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"td\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var headers : String\n        get()  = attributeStringString.get(this, \"headers\")\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\n\n    var rowSpan : String\n        get()  = attributeStringString.get(this, \"rowspan\")\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\n\n    var colSpan : String\n        get()  = attributeStringString.get(this, \"colspan\")\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class TEXTAREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"textarea\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var autoFocus : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\n\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var maxLength : String\n        get()  = attributeStringString.get(this, \"maxlength\")\n        set(newValue) {attributeStringString.set(this, \"maxlength\", newValue)}\n\n    var minLength : String\n        get()  = attributeStringString.get(this, \"minlength\")\n        set(newValue) {attributeStringString.set(this, \"minlength\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var placeholder : String\n        get()  = attributeStringString.get(this, \"placeholder\")\n        set(newValue) {attributeStringString.set(this, \"placeholder\", newValue)}\n\n    var readonly : Boolean\n        get()  = attributeBooleanTicker.get(this, \"readonly\")\n        set(newValue) {attributeBooleanTicker.set(this, \"readonly\", newValue)}\n\n    var required : Boolean\n        get()  = attributeBooleanTicker.get(this, \"required\")\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\n\n    var rows : String\n        get()  = attributeStringString.get(this, \"rows\")\n        set(newValue) {attributeStringString.set(this, \"rows\", newValue)}\n\n    var cols : String\n        get()  = attributeStringString.get(this, \"cols\")\n        set(newValue) {attributeStringString.set(this, \"cols\", newValue)}\n\n    var wrap : TextAreaWrap\n        get()  = attributeTextAreaWrapEnumTextAreaWrapValues.get(this, \"wrap\")\n        set(newValue) {attributeTextAreaWrapEnumTextAreaWrapValues.set(this, \"wrap\", newValue)}\n\n\n}\nval TEXTAREA.asFlowContent : FlowContent\n    get()  = this\n\nval TEXTAREA.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval TEXTAREA.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class TFOOT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tfoot\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\n/**\n * Table row\n */\n@HtmlTagMarker\ninline fun TFOOT.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"th\", consumer, initialAttributes, null, false, false), HtmlInlineTag {\n    var headers : String\n        get()  = attributeStringString.get(this, \"headers\")\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\n\n    var rowSpan : String\n        get()  = attributeStringString.get(this, \"rowspan\")\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\n\n    var colSpan : String\n        get()  = attributeStringString.get(this, \"colspan\")\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\n\n    var scope : ThScope\n        get()  = attributeThScopeEnumThScopeValues.get(this, \"scope\")\n        set(newValue) {attributeThScopeEnumThScopeValues.set(this, \"scope\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class THEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"thead\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\n/**\n * Table row\n */\n@HtmlTagMarker\ninline fun THEAD.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TIME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"time\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n    var dateTime : String\n        get()  = attributeStringString.get(this, \"datetime\")\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\n\n\n}\nval TIME.asFlowContent : FlowContent\n    get()  = this\n\nval TIME.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class TITLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"title\", consumer, initialAttributes, null, false, false), HtmlHeadTag {\n\n}\n\n@Suppress(\"unused\")\nopen class TR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tr\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\n/**\n * Table header cell\n */\n@HtmlTagMarker\ninline fun TR.th(scope : ThScope? = null, classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun TR.colTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.col.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun TR.colGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.colGroup.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun TR.rowTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.row.realValue,\"class\", classes), consumer).visit(block)\n@HtmlTagMarker\ninline fun TR.rowGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.rowGroup.realValue,\"class\", classes), consumer).visit(block)\n\n/**\n * Table data cell\n */\n@HtmlTagMarker\ninline fun TR.td(classes : String? = null, crossinline block : TD.() -> Unit = {}) : Unit = TD(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n",null,null,null,null,null,null,null,null,null],"names":[],"mappings":"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qF;IAClB,Y;IACA,oB;IACA,sB;IACA,0B;IACA,8C;IACA,0B;G;;;;;;EAEA,iC;IAAA,qD;IAAgB,wBAAK,IAAL,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,gBAA3B,C;IAAhB,Y;G;qCARJ,Y;IACI,c;G;qCADJ,Y;IAEI,kB;G;qCAFJ,Y;IAGI,mB;G;qCAHJ,Y;IAII,qB;G;qCAJJ,Y;IAKI,+B;G;qCALJ,Y;IAMI,qB;G;uCANJ,0E;IAAA,uBACI,4BADJ,EAEI,wCAFJ,EAGI,2CAHJ,EAII,iDAJJ,EAKI,+EALJ,EAMI,iDANJ,C;G;mCAAA,Y;IAAA,OACI,4CADJ,IAEI,0CAFJ,KAGI,4CAHJ,KAII,gDAJJ,KAKI,oEALJ,KAMI,gDANJ,O;G;mCAAA,Y;IAAA,c;IACI,mD;IACA,uD;IACA,wD;IACA,0D;IACA,oE;IACA,0D;IANJ,a;G;iCAAA,iB;IAAA,4IACI,gCADJ,IAEI,wCAFJ,IAGI,0CAHJ,IAII,8CAJJ,IAKI,kEALJ,IAMI,8CANJ,I;G;ECIgD,uC;IAExC,W;EAAA,C;EAHY,yB;IACZ,OAAO,QAAS,gBAAe,MAAf,CAAhB,UAAwC,kBAAxC,C;IAGJ,W;EAAA,C;EALJ,gB;IACI,gBAAgB,W;EAKpB,C;EXkEyE,qC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EDvB8E,gC;IAAC,W;G;ECuBzF,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ED7BuE,gC;IAAC,W;G;EC6BlF,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ED+S0E,6B;IAAC,W;G;EC/SrF,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ECzDJ,8B;IAAC,W;G;EDyDP,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEwEK,8B;IAAC,W;G;EFxEhB,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EDGc,8B;IAAC,W;G;ECHzB,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEgDG,6B;IAAC,W;G;EFhDd,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ED2W0E,+B;IAAC,W;G;EC3WrF,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEzBO,+B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zBuC,aAAI,kBAAgB,OAAhB,EAA5D,IAA4D,CAAJ,EAAuC,kBAAvC,CFyBvC,EAAS,eY9B7D,qBZ8B6D,CAAT,C;IAAA,SDXoF,gBAAO,iBAAgB,MAAhB,EAAxF,IAAwF,EAA6B,KAA7B,Ea4CtI,qBb5CsI,EAAP,EAAiD,kBAAjD,CCWpF,EAAS,gBYiC7B,qBZjC6B,CAAT,C;IYmC5D,W;EAAA,C;EA3GJ,0B;IZwEgE,SG6FQ,cAAK,aAAL,EAAe,kBAAf,CH7FR,EAAS,gBYtEhE,YZsEgE,CAAT,C;IAAA,SGuFkC,cAAK,kBAAgB,OAAhB,EAA9D,IAA8D,CAAL,EAAwC,kBAAxC,CHvFlC,EAAS,gBYpChE,cZoCgE,CAAT,C;EYqChE,C;EZrCyE,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EDvB8E,kC;IAAC,W;G;ECuBzF,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ED7BuE,kC;IAAC,W;G;EC6BlF,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ECzDJ,gC;IAAC,W;G;EDyDP,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ED+S0E,+B;IAAC,W;G;EC/SrF,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEwEK,gC;IAAC,W;G;EFxEhB,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ED2TsK,kC;IAAC,W;G;EC3TjL,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EI8GD,8B;IAAC,W;G;EJ9GV,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EI2JJ,8B;IAAC,W;G;EJ3JP,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EIZD,gC;IAAC,W;G;EJYV,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EIzCK,iC;IAAC,W;G;EJyChB,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EI7BK,iC;IAAC,W;G;EJ6BhB,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEkEW,iC;IAAC,W;G;EFlEtB,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EDkSmB,iC;IAAC,W;G;EClS9B,wC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEzBO,iC;IAAC,W;G;EFyBlB,wC;IAAA,4B;MAAE,wB;MA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"}